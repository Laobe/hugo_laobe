{
  "title": "GraphDB初见",
  "cells": [
    {
      "type": "markdown",
      "data": "相比起传统的关系型数据库，以及逐渐流行起来的文档型数据库和kv数据库，图数据库还算是相对小众。但是随着互联网的发展，数据之间的关系变得原来越复杂；机器学习人工智能的发展，相关数据的相互作用；图数据库能发挥的领域会越来越广，同时图数据库自身功能的完善和强大会使图数据库越来越被使用。\n\n之前一直有在关注ArangoDB的开发进程，现在看到ArangoDB出了一份[各个图数据库的性能对比测试](https://www.arangodb.com/2018/02/nosql-performance-benchmark-2018-mongodb-postgresql-orientdb-neo4j-arangodb/)。并且这个测试在ycombinator上产生了很大的讨论。自己本来对图数据库也很感兴趣，就想要参考这个测试来做一些深入的学习和研究。\n\n现在先对图数据库进行一些基本的了解和认知。\n\n\n### 图数据库是什么\n\n维基百科的定义是这样的：[https://en.wikipedia.org/wiki/Graph\\_database](https://en.wikipedia.org/wiki/Graph_database) 。是一个支持使用图数据结构（也就是支持节点的边）作为查询语句的数据库，其本质是一个数据库，因此也是包含计算处理引擎和数据存储引擎这两块，所以图数据库也就包含了这两块相关的特性，在存储上没什么特别的要求，可以将数据存成关系型数据库那种表，也可以将数据存成文档型和kv等类型；在计算引擎方面，针对图这种数据结构，提到了免索引邻接的实现方案（index-free adjancency），用于对图的遍历。（因为wiki上将这个免邻接方案认为是图数据库的一个特征。也引发了社区很大的讨论和疑问）\n\n但是回归到实际的工程应用中，我们需要的是对图数据结构的操作，因此图数据库的核心是图模型，图模型实现的是图论的基本原理和基于图论的数据结构和算法，包括图的遍历和最短路径问题等，在实际应用中可以在社交网络，路径规划等项目中发挥作用。\n\n另外，在实现Graph数据模型时候往往也会实现一些类似的数据模型，比如Document, Key-Value, RDF(知识图谱模型是一个有趣新颖的模型，在互联网维度越来越广的领域会发挥越来越大的作用)。因为这几个模型在实现上相互关联的，所以在实际工程中这些模型也可以做了考虑的因素。\n\n### 几种主流图数据库\n\n参考这个测试，加上自己平时对图数据库的关注。我选择了几个自己比较熟悉有相对主流的图数据库：\n\n1. ArangoDB -- 一直在关注的图数据库 \n\n2. neo4j -- 目前使用最广的图数据库\n![iTerm2.g4tF7p.neo4j-logo.png](quiver-image-url/C26AF7CBAE29D5D2EF1DAD8057BD5541.png =130x50)\n\n3. JanusGraph -- 是titan的一个分支，在titan停止维护之后发展出来。\n![iTerm2.DDTxZv.janusgraph.png](quiver-image-url/6CC92BD0857E93A363F7724A35E4B8B2.png =225x50)\n4. AgensGraph -- 很好玩，是PostgreSQL的一个分支，在PG之上实现了graph的功能 \n![iTerm2.VxaXTL.logo_bitnine_w.png](quiver-image-url/693F3884EA285E7DC354D7DB81C4DAAE.png =140x33)\n\n5. MongoDB -- 本身其实不是图数据库，但是因为是很成熟的文档型数据库，并且文档模型跟图模型设计上会有很多相似地方，对上述图数据库有很多参考对的地方。\n\nArangoDB：ArangoDB是一个支持key/value，document和graph模型的multi-model数据库ArangoDB使用了MMFiles和RocksDB两种存储引擎，RocksDB是在新的版本中添加进来，并且将此设为了默认存储引擎。因为底层设计是document的，因此针对graph模型定义的vertex和edge也都是存在document中，edge使用\\_from和\\_to来做关联。另外ArangoDB还实现了Pregel的分布式图计算，对于实际使用中需要做算法和数据分析等都能直接提供帮助。\n\nneo4j: 现在最流行的图数据库了， 他们定义的Cypher查询语言，在社区中逐渐流行起来，他们也希望将Cypher推向为图查询语言的标准。neo4j从概念上将自己定义为原生图数据库，从宏观角度来看就是它的数据索引和存储模型设计直接是按照图模型结构来，而不依赖别的模型进行存储。neo4j中定义了node和relationship来表达图模型，因为是原生图数据库，所以在relationship的数据结构中就设计了关联指针，而不需要对这一部分构建索引，另外对于最后的数据落盘，针对图数据库中涉及到的node，label，property，relationship都做了独立的文件存储。\n\n另外neo4j的社区做的很好，不仅有官方文档，还很喜欢出书，书不仅是介绍neo4j，主要是介绍了图数据库以及图数据库的应用，然后结合neo4j来做实际例子，在社区也是可以免费获得电子稿的。因为图数据库本身还算一个比较新的领域，大家的使用检验也比较少，这几本书对图数据库的普及和推广做了很大的贡献。\n\nJanusGraph 更像是一个站在巨人肩膀上的工程，他本身titan的一个分支，在titan停止更新后延续了titan的发展。在存储层，实现了cassandra，hbase，bigtable和BerkeleyDB的继承，在搜索方面，支持Elasticsearch, Solr and Lucene（几乎是涵盖了主流的搜索引擎）。在计算方面，又是套上了Apache TinkerPop的图计算框架，因此语法上也是遵守Apache的Germlin语法规范。从语法，计算，存储，搜索方面都使用了流行的先进方案，因此在使用过程中会遇到很多熟悉的用法。\n\nAgensGraph 因为是在PostgreSQL上实现的功能，从底层的存储和事务处理上都是利用PostgreSQL的原有功能，所以在支持GraphDB的同时，它还保留了PG的关系型数据库的功能。AG定义了vlabel和elabel来表示（vertex和edge），使用json document模型来存储，而edge中使用start和end来指示关联。因为PG的存在还可以使用PL/pgSQL和PL/Python来编写一些查询程序，具有一定的可编程性。\n\n\nGraphDB |查询语言 |存储引擎 |模型 |开发语言|全文搜索|图算法\n--- |--- |—--|—--|—--|—--|---\nArangoDB |AQL |rocksdb,mmfiles |Graph,Document,Key-value|c++|支持:依赖ireasearch|支持Pregel\n\nneo4j |Cypher |native graph storage |Graph|java|支持:依赖lucence|通过插件实现图算法支持\n\nJanusGraph |Gremlin |cassandra,hbase,bigtable,BerkeleyDB |Graph |java|支持使用elasticsearch，solr和lucene|支持TinkerPop\n\nAgensGraph |ANSI-SQL and openCypher |postgre |Graph,Relational |c |依赖PG自身的支持|可以通过PL来编程\n\nMongoDB |mongodb CRUD |WiredTiger,In-Memory,MMAPv1 |Document |c++|原生支持\n\n\n上面这几个数据库各有特点，并且核心特点分明。比如neo4j是原生图处理和原生存储；AgensGraph是建立在postgresql上的二次开发，底层是可靠的关系式存储，也就提供了RMDB可靠的ACID特性了；ArangoDB是基于文档模型存储和文档型数据库，并且在索引设计上是采用了一种称为novel index（结合了hash和链表）的混合索引，跟图数据库中的原生图处理有很大的不同；JanusGraph是分布式的kv型存储，上层是使用gremlin的图计算框架，提供了很灵活，编程性很高的图计算方式。这四种图数据库的特点相互交织，通过对他们的原理，特点做对比分析，可以学习到很多图数据库系统的设计实现原理，面对不同应用场景的扬长避短，灵活运用相关的技术。\n\n#### 总结\n\n图数据库是一个包含了语言系统，搜索引擎，存储引擎，图处理计算引擎等的综合系统，实现数据存储的同时还需要支持查询计算等。\n\n图数据在设计上包含了查询语言，索引设计和后端存储；从功能上包括搜索，图算法支持；从系统架构和性能稳定性上会涉及到集群和分布式的架构，以及对监控方面的相关支持（提供监控指标，或许当前系统性能等接口）。因此想要对上面这几种数据库做深入的分析和比较的话，就需要从查询语言，索引实现，算法和搜索的支持，后端存储的设计，集群的实现方案以及是否提供了对监控的支持等方面进行对比；然后参照arangodb的性能测试，增加一些测试维度；最后再分析一个关键部分的代码实现；来全面 比较这几个主流的GraphDB的特点优劣，也可以对图数据库的设计实现有更深入的认知。"
    },
    {
      "type": "text",
      "data": ""
    }
  ]
}