{
  "title": "GraphDB语法初见",
  "cells": [
    {
      "type": "text",
      "data": "<p>## GraphDB语法初见</p>\n<p>之前一直有在关注arangodb的开发进程，现在看到arangodb出了一份<a href=\"https://www.arangodb.com/2018/02/nosql-performance-benchmark-2018-mongodb-postgresql-orientdb-neo4j-arangodb/\">各个图数据库的对比测试</a>。自己本来对图数据库也很感兴趣，在ycombinator上看到了<a href=\"https://news.ycombinator.com/item?id=16375503\">对这个测试的讨论</a>。自己本来对图数据库也很感兴趣，就想要参考这个测试自己来做一些深入的学习和研究。</p>\n<p>现在先对图数据库进行一些基本的了解和认知。</p>\n<p>### 图数据库是什么</p>\n<p>维基百科的定义是这样的：<a href=\"https://en.wikipedia.org/wiki/Graph_database\">https://en.wikipedia.org/wiki/Graph_database</a>&nbsp;。是一个支持使用图数据结构（也就是支持节点的边）作为查询语句的数据库，其本质是一个数据库，因此也是包含计算处理引擎和数据存储引擎这两块，所以图数据库也就包含了这两块相关的特性，在存储上没什么特别的要求，可以将数据存成关系型数据库那种表，也可以将数据存成文档型和kv等类型；在计算引擎方面，针对图这种数据结构，提到了免索引邻接的实现方案（index-free adjancency），用于对图的遍历。（甚至认为这个是是图数据库的一个特征。但是在社区也存在着很大的质疑和讨论）</p>\n<p>但是回归到实际的工程应用中，我们需要的是对图数据结构的操作，因此图数据库的核心是图模型，图模型实现的是图论的基本原理和基于图论的数据结构和算法，包括图的遍历和最短路径问题等，在实际应用中可以在社交网络，路径规划等项目中发挥作用。</p>\n<p>另外，在实现Graph数据模型时候往往也会实现一些类似的数据模型，比如Document, Key-Value, RDF(知识图谱模型是一个有趣新颖的模型，在互联网维度越来越广的领域会发挥越来越大的作用)。因为这几个模型在实现上相互关联的，所以在实际工程中这些模型也可以做了考虑的因素。</p>\n<p>### 几种主流图数据库</p>\n<p>参考这个测试，加上自己平时对图数据库的关注。我选择了几个自己比较熟悉有相对主流的图数据库：</p>\n<p>1. ArangoDB -- 一直在关注的图数据库</p>\n<p>2. neo4j -- 目前使用最广的图数据库</p>\n<p>3. JanusGraph -- 是titan的一个分支，在titan停止维护之后发展出来。继承了titan的设计</p>\n<p>4. AgensGraph -- 很好玩，在PostgreSQL上实现了graph的功能</p>\n<p>5. MongoDB -- 本身其实不是图数据库，但是因为是很成熟的文档型数据库，并且文档模型跟图模型设计上会有很多相似地方，有很多可以比较的地方。</p><p><br></p><p>ArangoDB&nbsp;</p><p>neo4j 它们定义了Cypher查询语言，也希望将Cypher推向为图查询语言的标准，</p><p>JanusGraph 更像是一个站在巨人肩膀上的工程，他是titan的一个分支，在存储层，实现了cassandra，hbase，bigtable和BerkeleyDB的继承，在搜索方面，支持Elasticsearch, Solr and Lucene（几乎是涵盖了主流的搜索引擎）。在语法方面，又是套上了Apache TinkerPop的图计算框架，因此是遵守Apache的Germlin语法规范。</p><p>AgensGraph 因为是在PostgreSQL上实现的功能，从底层的存储和事务处理上都是利用PostgreSQL的原有功能，所以在支持GraphDB的同时，它还保留了PostgreSQL的关系型数据库的功能。<br></p><p><br></p>\n<p>**其实还有一个titan也很热门，由于好几年没有更新了，所以就没有持续关注了。**</p>\n<p>GraphDB  |查询语言    |存储引擎  |模型  |开发语言</p>\n<p>---  |---  |---  |---  |---</p>\n<p>ArangoDB |AQL  |rocksdb,mmfiles  |Graph,Document,Key-value  |c++</p>\n<p>neo4j  |Cypher    |non-native graph storage |Graph  |java</p>\n<p>JanusGraph |Gremlin    |cassandra,hbase,bigtable,BerkeleyDB  |Graph  |java</p>\n<p>AgensGraph |ANSI-SQL and openCypher  |postgre    |Graph,Relational  |c</p>\n<p>MongoDB  |mongodb CRUD  |WiredTiger,In-Memory,MMAPv1   |Document  |c++</p>\n<p>#### 查询语言</p>\n<p><a href=\"https://www.arangodb.com/wp-content/uploads/2016/05/shell-reference-card.pdf\">AQL</a>：ArangoDB自己定义的查询语言，由于是文档模型上设计的图模型因此很多语法都跟文档相关，有collection,document,edge的概念，文档的模式跟mongodb类似</p>\n<p><a href=\"http://www.opencypher.org\">Cypher</a>: neo4j定义出来的一个想要成为图数据库标准的图模型描述语言，现在也比较受业界认可，除了neo4j之外，agensgraph也是在PostgreSQL是实现了cypher语法，另外也和databricks合作，将cypher在spark上集成了。</p>\n<pre><code>\n MATCH (d:Database)-[:USES]-\\&gt;(Cypher)-[:QUERIES]-\\&gt;(:Model:Graph)\n\n WHERE d.name IN ['SAP HANA Graph','Redis','AgensGraph', 'Neo4j',...]\n\n RETURN Cypher.features\n\n</code></pre>\n<p>Gremlin: 这个语法更像是编程API，而不像查询语言。因此可以自己定义出更复杂的查询搜索功能</p>\n<pre><code>\n<pre class=\" language-gremlin\" style=\"box-sizing: border-box; overflow: auto; font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace; padding: 0em; margin-top: 0em; margin-bottom: 0em; line-height: 1.5; color: rgb(51, 122, 183); word-break: normal; word-wrap: normal; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; text-shadow: white 0px 0px; tab-size: 4; -webkit-hyphens: none;\"><code class=\" language-gremlin\" style=\"box-sizing: border-box; font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace; font-size: inherit; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; background-image: none; text-shadow: white 0px 0px; word-spacing: normal; word-wrap: normal; line-height: 1.5; tab-size: 4; -webkit-hyphens: none;\">  <span class=\"token comment\" spellcheck=\"true\" style=\"box-sizing: border-box; color: gray;\">// What is the distribution of job titles amongst Gremlin's collaborators?</span>\n    <span class=\"token traversalSource\" style=\"box-sizing: border-box; color: rgb(128, 0, 128);\">g</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: black;\">.</span><span class=\"token function\" style=\"box-sizing: border-box;\">V</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: black;\">(</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: black;\">)</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: black;\">.</span><span class=\"token function\" style=\"box-sizing: border-box;\">has</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: black;\">(</span><span class=\"token string\" style=\"box-sizing: border-box; color: rgb(102, 153, 0);\">\"name\"</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: black;\">,</span><span class=\"token string\" style=\"box-sizing: border-box; color: rgb(102, 153, 0);\">\"gremlin\"</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: black;\">)</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: black;\">.</span><span class=\"token function\" style=\"box-sizing: border-box;\">as</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: black;\">(</span><span class=\"token string\" style=\"box-sizing: border-box; color: rgb(102, 153, 0);\">\"a\"</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: black;\">)</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: black;\">.</span>\n      <span class=\"token function\" style=\"box-sizing: border-box;\">out</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: black;\">(</span><span class=\"token string\" style=\"box-sizing: border-box; color: rgb(102, 153, 0);\">\"created\"</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: black;\">)</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: black;\">.</span><span class=\"token function\" style=\"box-sizing: border-box;\">in</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: black;\">(</span><span class=\"token string\" style=\"box-sizing: border-box; color: rgb(102, 153, 0);\">\"created\"</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: black;\">)</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: black;\">.</span>\n        <span class=\"token function\" style=\"box-sizing: border-box;\">where</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: black;\">(</span><span class=\"token function\" style=\"box-sizing: border-box;\">neq</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: black;\">(</span><span class=\"token string\" style=\"box-sizing: border-box; color: rgb(102, 153, 0);\">\"a\"</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: black;\">)</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: black;\">)</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: black;\">.</span>\n      <span class=\"token function\" style=\"box-sizing: border-box;\">groupCount</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: black;\">(</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: black;\">)</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: black;\">.</span><span class=\"token function\" style=\"box-sizing: border-box;\">by</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: black;\">(</span><span class=\"token string\" style=\"box-sizing: border-box; color: rgb(102, 153, 0);\">\"title\"</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: black;\">)</span>\n</code></pre><div><br></div></code></pre>\n<p>MongoDB CRUD: mongodb是文档数据库，其主要概念就是collection和document，crud操作也是基于这两个概念，并且由于文档直接的关联概念比较小，不像图模型中处处存在联系，因此关联查询那块比较弱，也不会主要有MATCH那个概念。</p>\n<p>#### 存储引擎</p>\n<p>ArangoDB使用了MMFiles和RocksDB两种存储引擎，RocksDB是在新的版本中添加进来，并且将此设为了默认存储引擎</p><p><br></p><p>#### 总结</p><p>这几个数据库各有特点，而且特点是相互交叉的，比如neo4j是原生图处理和原生存储；AgensGraph是建立在postgresql上的二次开发，底层是可靠的关系式存储，；ArangoDB是文档存储和文档型存储存储，并且在索引设计上是采用了一种称为novel index（结合了hash和链表）的混合索引，跟图数据库中的原生图处理有很大的不同；JanusGraph是分布式的kv型存储，上层是使用gremlin的图计算框架，是一种在编程性很高，很灵活的图计算方式。这四种图数据库的方式各有特点，相互交织，通过对他们的原理，特点做对比分析，可以学习到很多图数据库系统的设计实现原理，面对不同应用场景的扬长避短，灵活运用相关的技术。</p>\n"
    }
  ]
}